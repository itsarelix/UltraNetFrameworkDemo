@page "/register"
@using UltraNet.UI.Model
@using UltraNet.UI.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Nav

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-5 col-md-7 col-sm-10">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="purpleTitle text-center mb-4">Register</h3>

                    <EditForm Model="@model" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="model.Username" class="form-control" id="usernameInput" placeholder="Username" />
                            <label for="usernameInput">Username</label>
                            <ValidationMessage For="@(() => model.Username)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="model.Password" type="password" class="form-control" id="passwordInput" placeholder="Password" />
                            <label for="passwordInput">Password</label>
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" id="confirmPasswordInput" placeholder="Confirm Password" />
                            <label for="confirmPasswordInput">Confirm Password</label>
                            <ValidationMessage For="@(() => model.ConfirmPassword)" />
                        </div>

                        <button type="submit" class="btn purpleButton w-100">Register</button>

                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert alert-success mt-3">@message</div>
                        }

                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger mt-3">@error</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest model = new();
    private string? message;
    private string? error;

    private async Task HandleRegister()
    {
        var result = await AuthService.RegisterAsync(model);

        if (result.IsSuccess == true)
        {
            message = " Registration successful! Please login.";
            error = null;
            await Task.Delay(1500);
            Nav.NavigateTo("/login");
        }
        else
        {
            error = result.Message ?? " Registration failed.";
            message = null;
        }
    }
}